<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:BlockifyLauncher.MVVM.Views.Converters">

    <SolidColorBrush x:Key="NoTrigerHeaderButton" Color="Transparent"/>
    <SolidColorBrush x:Key="TrigerHeaderButton" Color="#262626"/>
    <SolidColorBrush x:Key="TrigerHeaderButtonExit" Color="Red"/>
    <SolidColorBrush x:Key="HeaderText" Color="#FFF"/>
    <SolidColorBrush x:Key="PanelColor" Color="#121212"/>

    <Style x:Key="CustomButton" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="20" 
                            BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Label Content="{TemplateBinding Content}" FontWeight="Bold" FontSize="16"
                               HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFF"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
            <Trigger Property="Name" Value="Start">
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0 0" EndPoint="1 0">
                            <GradientStop Color="#009046" Offset="0.0"/>
                            <GradientStop Color="#009006" Offset="1.0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="CustomBut">
                <Setter Property="BorderBrush" Value="#B2FFFFFF"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0 0" EndPoint="1 0">
                            <GradientStop Color="#127D9F" Offset="0.0"/>
                            <GradientStop Color="#09750E" Offset="1.0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="CustomButAdd">
                <Setter Property="BorderBrush" Value="#8CFFFFFF"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0 0" EndPoint="1 0">
                            <GradientStop Color="#121212" Offset="0.0"/>
                            <GradientStop Color="#1D1D1D" Offset="1.0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="HeaderButton" TargetType="Button">
        <Setter Property="Margin" Value="1,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{StaticResource NoTrigerHeaderButton}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <Label Content="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" Margin="0,-5,0,0"
                               Foreground="{StaticResource HeaderText}" FontWeight="Medium"
                               HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource TrigerHeaderButton}"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Name, RelativeSource={RelativeSource Self}}" Value="Exit" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource TrigerHeaderButtonExit}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="WindowBorderStyle" TargetType="Border">
        <Setter Property="Background">
            <Setter.Value>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Grid>
                            <Image Source="pack://application:,,,/Image/wallpaper.jpg" Stretch="Fill" x:Name="InnerBlurContainer"/>
                            <Rectangle Opacity="0.7">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0 -0.5" EndPoint="0 1">
                                        <GradientStop Color="#7F000000" Offset="0.0"/>
                                        <GradientStop Color="#B2680090" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PanelBorder" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource PanelColor}"/>
        <Setter Property="CornerRadius" Value="30"/>
    </Style>

    <Style x:Key="ProcessBarBorder" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource PanelColor}"/>
        <Style.Triggers>
            <Trigger Property="Tag" Value="None">
                <Setter Property="Opacity" Value="0"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="Use">
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                From="1" To="0" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="Close">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                 From="1" To="0" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowBorderHeaderStyle" TargetType="Border">
        <Setter Property="Background" Value="#1F1F1F"/>
    </Style>

    <Style x:Key="RoundProgressBarStyle" TargetType="{x:Type ProgressBar}" xmlns:sys="clr-namespace:System;assembly=mscorlib">
        <Style.Resources>
            <converters:RoundProgressPathConverter x:Key="Conv"/>
            <sys:Double x:Key="RelativeThickness">0.75</sys:Double>
            <sys:Double x:Key="Zero">0.0</sys:Double>
            <sys:Double x:Key="One">1.0</sys:Double>
            <sys:Double x:Key="IndeterminatePart">0.25</sys:Double>
            <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025"/>
            <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
            <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation 
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                    Storyboard.TargetName="Animation"
                                    From="0" To="360" Duration="0:0:2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Path Fill="{TemplateBinding Background}" Stretch="Uniform"
                      Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}"
                                      ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Source="{StaticResource One}"/>
                                    <Binding Source="{StaticResource Zero}"/>
                                    <Binding Source="{StaticResource One}"/>
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <Path Fill="{TemplateBinding Foreground}" Stretch="Uniform" Name="Indicator">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}"
                                      ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <Path Fill="{TemplateBinding Foreground}" Stretch="Uniform" Name="Animation"
                      Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}"
                                      ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Source="{StaticResource IndeterminatePart}"/>
                                    <Binding Source="{StaticResource Zero}"/>
                                    <Binding Source="{StaticResource One}"/>
                                </MultiBinding>
                            </Path.Data>
                            <Path.RenderTransform>
                                <RotateTransform/>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Animation" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>